name: Release

on:
  push:
    tags:
      - "v*" # 当推送以v开头的标签时触发，如 v1.0.0

permissions:
  contents: write # 添加写入权限
  packages: write
  actions: write

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: dm-sqllog-parser # 二进制文件名

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # 明确指定发布需要的权限
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            suffix: .exe

          # macOS targets (only ARM64)
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ""
        features: [core, export-csv]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: "-C target-feature=+crt-static" # 静态链接，减少依赖

      - name: Prepare binary for upload
        shell: bash
        run: |
          # 创建带有功能特性标识的文件名
          BINARY_NAME_WITH_FEATURES=${{ env.BINARY_NAME }}-${{ matrix.features }}-${{ matrix.target }}${{ matrix.suffix }}
          cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.suffix }}" "$BINARY_NAME_WITH_FEATURES"
          echo "UPLOAD_FILE=$BINARY_NAME_WITH_FEATURES" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.UPLOAD_FILE }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
