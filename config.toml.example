# 示例配置文件（config.toml）用于 sqllog-analysis

[log]
# 是否在 stdout 打印日志
enable_stdout = true
# 日志目录
log_dir = "logs"
 # 日志等级：error/warn/info/debug/trace/off
 level = "info"

[database]
# DuckDB 数据库文件路径
db_path = "sqllogs.duckdb"

[export]
# 是否启用导出
enabled = true
# 导出格式：csv/json/excel
format = "csv"
# 导出目标路径
out_path = "exports/out.csv"
# 是否按线程输出
per_thread_out = false

# 写入选项（overwrite_or_ignore / overwrite / append）
overwrite_or_ignore = false
overwrite = false
append = false


# 当 use_in_memory = true 时，程序会先在内存中的 DuckDB 写入数据。
# 旧实现会把内存数据库 ATTACH 到磁盘并以 CTAS 把数据写回磁盘文件。
# 现在默认行为是“内存写入仅保留在内存，不再自动导出到磁盘”。
# 如果你需要恢复旧的导出到磁盘行为，请在配置中添加并设置下面的键为 true：
# use_in_memory_export_export_to_disk = true
# 注意：目前默认的 in-memory 路径只在内存中写入数据（不会创建磁盘表）。

# 单个导出文件大小上限（字节）
# 注意：不要设置为 0。配置为 0 会在程序启动时被视为错误并导致退出。
# 要表示无上限，请删除或注释掉该行。
file_size_bytes = 104857600

# sqllog 配置节
# 指定 sqllog 存放目录，支持相对路径或绝对路径。
# 当未提供时，程序默认使用相对目录 "sqllog"（即运行目录下的 sqllog/）。
[sqllog]
sqllog_dir = "sqllog"
# 可选：按解析出的记录数分块处理日志文件，每当解析出指定数量的条目时会触发一次处理回调。
# 如果设置为 0 或者省略，则表示禁用分块（一次性解析完整文件）。
# chunk_size = 1000
